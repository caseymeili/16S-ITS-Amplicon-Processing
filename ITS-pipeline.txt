#!/bin/bash

# ITS Data Processing
# mothur v.1.48.0
# adapted from MiSeq SOP (accessed October 2023), https://mothur.org/wiki/miseq_sop/

####################################################################################

ml mothur/1.48.0
ml vsearch/040218

# set processors, modify depending on system
set.current(processors=48)

# combine forward and reverse reads under single sample name
# input file created according to mothur make.file format (sample-name forward-name reverse-name)
make.contigs(file=rodent.ITS.txt)
summary.seqs(fasta=rodent.ITS.trim.contigs.fasta, count=rodent.ITS.contigs.count_table)

# screen to remove sequences longer than 350 or shorter than 200 base pairs, ambiguous bases, or more than 8 homopolymers
screen.seqs(fasta=rodent.ITS.trim.contigs.fasta, count=rodent.ITS.contigs.count_table, maxambig=0, minlength=200, maxlength=350, maxhomop=8)
summary.seqs(fasta=rodent.ITS.trim.contigs.good.fasta, count=rodent.ITS.contigs.good.count_table)

# remove duplicate sequences, this generates a names file
unique.seqs(fasta=rodent.ITS.trim.contigs.good.fasta, count=rodent.ITS.contigs.good.count_table)
summary.seqs(fasta=rodent.ITS.trim.contigs.good.unique.fasta, count=rodent.ITS.trim.contigs.good.count_table)

# precluster allowing for up to 2 differences between sequences
pre.cluster(fasta=rodent.ITS.trim.contigs.good.unique.fasta, count=rodent.ITS.trim.contigs.good.count_table, diffs=2)

# remove chimeras using VSEARCH algorithm 
chimera.vsearch(fasta=rodent.ITS.trim.contigs.good.unique.precluster.fasta, count=rodent.ITS.trim.contigs.good.unique.precluster.count_table, dereplicate=t)
summary.seqs(fasta=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.fasta, count=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.count_table)

# classify sequences using UNITE mothur release for fungi version 9 reference files (UNITEv9_sh_dynamic.fasta & UNITEv9_sh_dynamic.tax)
# references were obtained from UNITE Community, October 2023 (DOI: 10.15156/BIO/2938075)
classify.seqs(fasta=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.fasta, count=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.count_table, reference=UNITEv9_sh_dynamic.fasta, taxonomy=UNITEv9_sh_dynamic.tax)

# remove unwanted sequences
remove.lineage(fasta=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.fasta, count=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.count_table, taxonomy=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.UNITEv9_sh_dynamic.wang.taxonomy, taxon=Protista-unknown)
summary.tax(taxonomy=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.UNITEv9_sh_dynamic.wang.taxonomy, count=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.count_table)

# creating OTUs
cluster(fasta=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.fasta, count=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.count_table, method=agc, processors=16, cutoff=0.05)
summary.seqs(fasta=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.fasta, count=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.count_table)
make.shared(list=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.agc.list, count=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.count_table)

# classify each OTU
classify.otu(list=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.agc.list, count=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.count_table, taxonomy=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.UNITEv9_sh_dynamic.wang.pick.taxonomy)
get.oturep(fasta=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.fasta, count=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.count_table, list=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.agc.list, method=abundance)

# check number of sequences in each sample
count.groups(shared=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.agc.shared)

# determine coverage (Good's coverage index)
summary.single(shared=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.agc.shared, calc=coverage)

# classify all sequences to genus level (for pie charts)
#classify.seqs(fasta=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.fasta, count=rodent.ITS.trim.contigs.good.unique.precluster.denovo.vsearch.count_table, reference=UNITEv9_sh_dynamic.fasta, taxonomy=UNITEv9_sh_dynamic.tax, printlevel=6)



